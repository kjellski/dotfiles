#!/usr/bin/env python
import argparse, os, logging, datetime, shutil, sys
from lib.DotFile import DotFile

# ################################################################
# Arguments and defaults
# ################################################################
parser = argparse.ArgumentParser(description='''A ~/.files profile management. 
    This program tries to never harm any existing environment. 
    It backs up every file it should deploy and every deploy is linked to for later referenece.''',
    epilog='author: @kjellski',
    prog='dotfiles')
parser.add_argument('-p', 
    '--profile', 
    help='selects the profile to be deployed', 
    default='compatible')
# parser.add_argument('-l', 
#     '--link', 
#     help='just creates links to all files in the active profile', 
#     default='false')
parser.add_argument('-t', 
    '--target', 
    help='selects the folder to deploy in, if not existent, will be created,. \nNote: DEFAULT is your $HOME', 
    default=os.environ['HOME'])
parser.add_argument('-v', '--version', action='version', version='%(prog)s ')
parser.add_argument('-d', 
    '--verbose',
    help='''sets the verbosity of this script, multiple 
    ds will make it more verbose''',
    action='count',
    # hack, stands DEBUG when ERROR..
    default=logging.INFO/10) 

args = parser.parse_args()
# set the loglevel for the -vvvv option
logging.basicConfig(format='%(levelname)s: %(message)s', 
    level=(5 - args.verbose)*10)

logging.debug('Starting with these parameters:')
for arg, value in sorted(vars(args).items()):
    logging.debug("%s: %r", arg, value)

# path magic does this: get the absolute path of this script, then get to the parent of its parent
dotfiles_path = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
logging.debug("scripts basepath: " + dotfiles_path)

## ask for writing to ${HOME}, be nice
if args.target == os.environ['HOME']:
    should_we_proceed = raw_input("You're about to deploy to your ${HOME} folder, are you sure? [y/N] ")
    if should_we_proceed not in ['y', 'Y', 'Yes', 'YES']:
        logging.info("Aborted by user.")
        sys.exit()

# ################################################################
# folder conatining all the profiles, like the default one.
# ################################################################
profile_path = os.path.join(dotfiles_path, 'profiles', args.profile)
logging.info('profile_path: ' + profile_path)

# now check for the concrete profile folders existence
if not os.path.exists(profile_path):
    logging.error('The profile was not found: ' + profile_path)
    sys.exit(-1)

# if the profile is a git submodule, recursively init and update it.
# git submodule update --init --recursive
# put this into install, seems cleaner, maybe someone only wants to
# do this at installation time and asking someone will be another 
# question to be asked each run --> sucks

# ################################################################
# folder for all backups, timestamped subdirs will be created
# ################################################################
backup_path = os.path.join(dotfiles_path, 'backups', datetime.datetime.now().strftime("%Y-%m-%d_%H:%M:%S"))
logging.info('backup_path: ' + backup_path)
DotFile.backup_path = backup_path
# create the proper backup folder if not existing
try: 
    os.makedirs(backup_path)
    logging.debug('created backup folder: ' + backup_path)
except Exception, e:
    pass

# ################################################################
# folder conatining the working copy of the profile used.
# ################################################################
working_path = os.path.join(dotfiles_path, 'active')
logging.info('working_path: ' + working_path)
DotFile.profile_path = working_path
# create the proper backup folder if not existing
try: 
    os.makedirs(working_path)
    logging.debug('created working folder: ' + working_path)
except Exception, e:
    pass

# ################################################################
# folder to deploy the whole dotfiles to
# ################################################################
target_path = args.target
logging.info('target_path: ' + target_path)
DotFile.target_path = target_path

# create the target folder
try: 
    os.makedirs(target_path)
    logging.info('The target was not found, created folder: ' + target_path)
except Exception, e:
    pass

# check for every file that would be replaced by deploying the profile
# if it's existent AND is a link, ask for deletion
for root, dirs, files in os.walk(target_path):
    for file in files:
        files_abs_path = os.path.join(target_path, file)
        logging.debug('Checking for existing link of path: ' + files_abs_path)
        if os.path.islink(files_abs_path):
            logging.debug('Existing link found for: ' + files_abs_path)
            should_we_proceed = raw_input('The link ' + files_abs_path + ' exists, should it be removed? [y/N] ')
            if should_we_proceed not in ['y', 'Y', 'Yes', 'YES']:
                logging.info("Aborted by user.")
                sys.exit()
            os.remove(file)
            logging.info('Link ' + files_abs_path + ' removed.') 

# ################################################################
# copy over the profile to the operationing folder
# ################################################################
try:
    #if the working copy of the wokring profile exists, delete it.
    shutil.rmtree(working_path)
    # copy over the working profile
    shutil.copytree(profile_path, working_path)
except Exception, e:
    logging.error(e)
    logging.error('Unable to copy the profile to the working folder, exiting.')
    sys.exit()

for file in os.listdir(working_path):
    f = DotFile(file)
    f.link()
